I want to create Objects directly and empty
and create them with a reference to another already existing Object preassigned
I also want to be able to assign specific attributes like partner through a special Rest call

isExists should not be called in the controller! it is just a crutch

add all the other stuff

a fortress should always start with enough food to build 3 workstations

TODO rn:
own command for jobskill of a dwarf
own command for foodstores of a fortress
to marry dwarfs must be in the same fortress


/dwarf/{id}/work/{workstationTypeId}/job/{jobId}
/dwarf/{id}/work/{workstationTypeName}/job/{jobId}
/dwarf/{id}/work/{workstationTypeId}/job/{jobName}
/dwarf/{id}/work/{workstationTypeName}/job/{jobName} in a working controller. Returns a Map of Foodstores to fillevel (Int)

/workstationType/{id}/job
/workstationType/{name}/job returns a list of all jobs on this type

/workstationType/job returns a list of all wkokstationtypes and jobs

/fortress/{id}/health returns a map of dwarves to healths. sorted by health

/day returns a list of fortresses, their name, and their map of foodstores to fillevels and a list of deaths in the fortress -->last


There are warning in the Tests concerning the javaagent dynamic loading. Check those out when you have time
Deduplicate getting from a repo and error into a helper
deduplicate the creation of resttemplate into a helper
test: make a endpoint yml?

## time concept

- start at year 0
- each month is 12 days
- each year has 9 months: 2 spring - 1 summer - 2 autumn - 4 winter
- time has no effect on the crop yields
- after all actions have been taken, advance a day with a special command to get to the next day
- fortress get created in year 0 and then time counts automatically
- date is saved in a table?


Nice query:
SELECT j.id ,j.name AS 'job',
GROUP_CONCAT(DISTINCT r.name, ': ', i.amount SEPARATOR ', ') AS 'inputs',
GROUP_CONCAT(DISTINCT r2.name, ': ', p.amount SEPARATOR ', ') AS 'products'
FROM job j LEFT JOIN job_input i ON j.id=i.job_id
LEFT JOIN job_product p ON j.id=p.job_id
LEFT JOIN resource r ON i.resource_id=r.id
LEFT JOIN resource r2 ON p.resource_id=r2.id
GROUP BY j.id
ORDER BY j.id ASC